/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_maf(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_maf(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_maf(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "maf.hpp"
#include "factory.hpp"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< MAF::BufferInfo > *new_std_vector_Sl_MAF_BufferInfo_Sg___SWIG_2(int capacity){
        std::vector< MAF::BufferInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MAF::BufferInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MAF::BufferInfo std_vector_Sl_MAF_BufferInfo_Sg__getitemcopy(std::vector< MAF::BufferInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MAF::BufferInfo >::value_type const &std_vector_Sl_MAF_BufferInfo_Sg__getitem(std::vector< MAF::BufferInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__setitem(std::vector< MAF::BufferInfo > *self,int index,MAF::BufferInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__AddRange(std::vector< MAF::BufferInfo > *self,std::vector< MAF::BufferInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MAF::BufferInfo > *std_vector_Sl_MAF_BufferInfo_Sg__GetRange(std::vector< MAF::BufferInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MAF::BufferInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__Insert(std::vector< MAF::BufferInfo > *self,int index,MAF::BufferInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__InsertRange(std::vector< MAF::BufferInfo > *self,int index,std::vector< MAF::BufferInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__RemoveAt(std::vector< MAF::BufferInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__RemoveRange(std::vector< MAF::BufferInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MAF::BufferInfo > *std_vector_Sl_MAF_BufferInfo_Sg__Repeat(MAF::BufferInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MAF::BufferInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__Reverse__SWIG_0(std::vector< MAF::BufferInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__Reverse__SWIG_1(std::vector< MAF::BufferInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfo_Sg__SetRange(std::vector< MAF::BufferInfo > *self,int index,std::vector< MAF::BufferInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< MAF::BufferInfoHeader > *new_std_vector_Sl_MAF_BufferInfoHeader_Sg___SWIG_2(int capacity){
        std::vector< MAF::BufferInfoHeader >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MAF::BufferInfoHeader >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MAF::BufferInfoHeader std_vector_Sl_MAF_BufferInfoHeader_Sg__getitemcopy(std::vector< MAF::BufferInfoHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MAF::BufferInfoHeader >::value_type const &std_vector_Sl_MAF_BufferInfoHeader_Sg__getitem(std::vector< MAF::BufferInfoHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__setitem(std::vector< MAF::BufferInfoHeader > *self,int index,MAF::BufferInfoHeader const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__AddRange(std::vector< MAF::BufferInfoHeader > *self,std::vector< MAF::BufferInfoHeader > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MAF::BufferInfoHeader > *std_vector_Sl_MAF_BufferInfoHeader_Sg__GetRange(std::vector< MAF::BufferInfoHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MAF::BufferInfoHeader >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__Insert(std::vector< MAF::BufferInfoHeader > *self,int index,MAF::BufferInfoHeader const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__InsertRange(std::vector< MAF::BufferInfoHeader > *self,int index,std::vector< MAF::BufferInfoHeader > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__RemoveAt(std::vector< MAF::BufferInfoHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__RemoveRange(std::vector< MAF::BufferInfoHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MAF::BufferInfoHeader > *std_vector_Sl_MAF_BufferInfoHeader_Sg__Repeat(MAF::BufferInfoHeader const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MAF::BufferInfoHeader >(count, value);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__Reverse__SWIG_0(std::vector< MAF::BufferInfoHeader > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__Reverse__SWIG_1(std::vector< MAF::BufferInfoHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_BufferInfoHeader_Sg__SetRange(std::vector< MAF::BufferInfoHeader > *self,int index,std::vector< MAF::BufferInfoHeader > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< MAF::AlternativeLocation > *new_std_vector_Sl_MAF_AlternativeLocation_Sg___SWIG_2(int capacity){
        std::vector< MAF::AlternativeLocation >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MAF::AlternativeLocation >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MAF::AlternativeLocation std_vector_Sl_MAF_AlternativeLocation_Sg__getitemcopy(std::vector< MAF::AlternativeLocation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MAF::AlternativeLocation >::value_type const &std_vector_Sl_MAF_AlternativeLocation_Sg__getitem(std::vector< MAF::AlternativeLocation > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__setitem(std::vector< MAF::AlternativeLocation > *self,int index,MAF::AlternativeLocation const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__AddRange(std::vector< MAF::AlternativeLocation > *self,std::vector< MAF::AlternativeLocation > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MAF::AlternativeLocation > *std_vector_Sl_MAF_AlternativeLocation_Sg__GetRange(std::vector< MAF::AlternativeLocation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MAF::AlternativeLocation >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__Insert(std::vector< MAF::AlternativeLocation > *self,int index,MAF::AlternativeLocation const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__InsertRange(std::vector< MAF::AlternativeLocation > *self,int index,std::vector< MAF::AlternativeLocation > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__RemoveAt(std::vector< MAF::AlternativeLocation > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__RemoveRange(std::vector< MAF::AlternativeLocation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MAF::AlternativeLocation > *std_vector_Sl_MAF_AlternativeLocation_Sg__Repeat(MAF::AlternativeLocation const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MAF::AlternativeLocation >(count, value);
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__Reverse__SWIG_0(std::vector< MAF::AlternativeLocation > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__Reverse__SWIG_1(std::vector< MAF::AlternativeLocation > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_AlternativeLocation_Sg__SetRange(std::vector< MAF::AlternativeLocation > *self,int index,std::vector< MAF::AlternativeLocation > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< MAF::Frame > *new_std_vector_Sl_MAF_Frame_Sg___SWIG_2(int capacity){
        std::vector< MAF::Frame >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MAF::Frame >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MAF::Frame std_vector_Sl_MAF_Frame_Sg__getitemcopy(std::vector< MAF::Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MAF::Frame >::value_type const &std_vector_Sl_MAF_Frame_Sg__getitem(std::vector< MAF::Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__setitem(std::vector< MAF::Frame > *self,int index,MAF::Frame const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__AddRange(std::vector< MAF::Frame > *self,std::vector< MAF::Frame > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MAF::Frame > *std_vector_Sl_MAF_Frame_Sg__GetRange(std::vector< MAF::Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MAF::Frame >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__Insert(std::vector< MAF::Frame > *self,int index,MAF::Frame const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__InsertRange(std::vector< MAF::Frame > *self,int index,std::vector< MAF::Frame > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__RemoveAt(std::vector< MAF::Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__RemoveRange(std::vector< MAF::Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MAF::Frame > *std_vector_Sl_MAF_Frame_Sg__Repeat(MAF::Frame const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MAF::Frame >(count, value);
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__Reverse__SWIG_0(std::vector< MAF::Frame > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__Reverse__SWIG_1(std::vector< MAF::Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_Frame_Sg__SetRange(std::vector< MAF::Frame > *self,int index,std::vector< MAF::Frame > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< MAF::Track > *new_std_vector_Sl_MAF_Track_Sg___SWIG_2(int capacity){
        std::vector< MAF::Track >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MAF::Track >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MAF::Track std_vector_Sl_MAF_Track_Sg__getitemcopy(std::vector< MAF::Track > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MAF::Track >::value_type const &std_vector_Sl_MAF_Track_Sg__getitem(std::vector< MAF::Track > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__setitem(std::vector< MAF::Track > *self,int index,MAF::Track const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__AddRange(std::vector< MAF::Track > *self,std::vector< MAF::Track > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MAF::Track > *std_vector_Sl_MAF_Track_Sg__GetRange(std::vector< MAF::Track > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MAF::Track >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__Insert(std::vector< MAF::Track > *self,int index,MAF::Track const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__InsertRange(std::vector< MAF::Track > *self,int index,std::vector< MAF::Track > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__RemoveAt(std::vector< MAF::Track > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__RemoveRange(std::vector< MAF::Track > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MAF::Track > *std_vector_Sl_MAF_Track_Sg__Repeat(MAF::Track const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MAF::Track >(count, value);
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__Reverse__SWIG_0(std::vector< MAF::Track > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__Reverse__SWIG_1(std::vector< MAF::Track > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MAF_Track_Sg__SetRange(std::vector< MAF::Track > *self,int index,std::vector< MAF::Track > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoArray__SWIG_0() {
  void * jresult ;
  std::vector< MAF::BufferInfo > *result = 0 ;
  
  result = (std::vector< MAF::BufferInfo > *)new std::vector< MAF::BufferInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MAF::BufferInfo > *arg1 = 0 ;
  std::vector< MAF::BufferInfo > *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MAF::BufferInfo > *)new std::vector< MAF::BufferInfo >((std::vector< MAF::BufferInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_Clear(void * jarg1) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_Add(void * jarg1, void * jarg2) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  MAF::BufferInfo *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (MAF::BufferInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MAF::BufferInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoArray_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  std::vector< MAF::BufferInfo >::size_type result;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  result = ((std::vector< MAF::BufferInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoArray_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  result = (bool)((std::vector< MAF::BufferInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoArray_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  std::vector< MAF::BufferInfo >::size_type result;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  result = ((std::vector< MAF::BufferInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  std::vector< MAF::BufferInfo >::size_type arg2 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoArray__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MAF::BufferInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MAF::BufferInfo > *)new_std_vector_Sl_MAF_BufferInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoArray_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  MAF::BufferInfo result;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MAF_BufferInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MAF::BufferInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::BufferInfo >::value_type *) &std_vector_Sl_MAF_BufferInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  MAF::BufferInfo *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::BufferInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__setitem(arg1,arg2,(MAF::BufferInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_AddRange(void * jarg1, void * jarg2) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  std::vector< MAF::BufferInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MAF_BufferInfo_Sg__AddRange(arg1,(std::vector< MAF::BufferInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoArray_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MAF::BufferInfo > *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MAF::BufferInfo > *)std_vector_Sl_MAF_BufferInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  MAF::BufferInfo *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::BufferInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__Insert(arg1,arg2,(MAF::BufferInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::BufferInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__InsertRange(arg1,arg2,(std::vector< MAF::BufferInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::BufferInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfo > *result = 0 ;
  
  arg1 = (MAF::BufferInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::BufferInfo > *)std_vector_Sl_MAF_BufferInfo_Sg__Repeat((MAF::BufferInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_Reverse__SWIG_0(void * jarg1) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  std_vector_Sl_MAF_BufferInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoArray_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::BufferInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfo_Sg__SetRange(arg1,arg2,(std::vector< MAF::BufferInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_BufferInfoArray(void * jarg1) {
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoHeaderArray__SWIG_0() {
  void * jresult ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  result = (std::vector< MAF::BufferInfoHeader > *)new std::vector< MAF::BufferInfoHeader >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoHeaderArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = 0 ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfoHeader > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MAF::BufferInfoHeader > *)new std::vector< MAF::BufferInfoHeader >((std::vector< MAF::BufferInfoHeader > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Clear(void * jarg1) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Add(void * jarg1, void * jarg2) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  MAF::BufferInfoHeader *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (MAF::BufferInfoHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfoHeader const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MAF::BufferInfoHeader const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  std::vector< MAF::BufferInfoHeader >::size_type result;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  result = ((std::vector< MAF::BufferInfoHeader > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  bool result;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  result = (bool)((std::vector< MAF::BufferInfoHeader > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  std::vector< MAF::BufferInfoHeader >::size_type result;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  result = ((std::vector< MAF::BufferInfoHeader > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  std::vector< MAF::BufferInfoHeader >::size_type arg2 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfoHeader >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoHeaderArray__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MAF::BufferInfoHeader > *)new_std_vector_Sl_MAF_BufferInfoHeader_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  MAF::BufferInfoHeader result;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MAF_BufferInfoHeader_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MAF::BufferInfoHeader(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfoHeader >::value_type *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::BufferInfoHeader >::value_type *) &std_vector_Sl_MAF_BufferInfoHeader_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  MAF::BufferInfoHeader *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::BufferInfoHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfoHeader const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__setitem(arg1,arg2,(MAF::BufferInfoHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_AddRange(void * jarg1, void * jarg2) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  std::vector< MAF::BufferInfoHeader > *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfoHeader > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfoHeader > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MAF_BufferInfoHeader_Sg__AddRange(arg1,(std::vector< MAF::BufferInfoHeader > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MAF::BufferInfoHeader > *)std_vector_Sl_MAF_BufferInfoHeader_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  MAF::BufferInfoHeader *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::BufferInfoHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfoHeader const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__Insert(arg1,arg2,(MAF::BufferInfoHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfoHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::BufferInfoHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfoHeader > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__InsertRange(arg1,arg2,(std::vector< MAF::BufferInfoHeader > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::BufferInfoHeader *arg1 = 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::BufferInfoHeader const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::BufferInfoHeader > *)std_vector_Sl_MAF_BufferInfoHeader_Sg__Repeat((MAF::BufferInfoHeader const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Reverse__SWIG_0(void * jarg1) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  std_vector_Sl_MAF_BufferInfoHeader_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeaderArray_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int arg2 ;
  std::vector< MAF::BufferInfoHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::BufferInfoHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::BufferInfoHeader > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_BufferInfoHeader_Sg__SetRange(arg1,arg2,(std::vector< MAF::BufferInfoHeader > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_BufferInfoHeaderArray(void * jarg1) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_MediaLocationArray__SWIG_0() {
  void * jresult ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  result = (std::vector< MAF::AlternativeLocation > *)new std::vector< MAF::AlternativeLocation >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_MediaLocationArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = 0 ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::AlternativeLocation > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MAF::AlternativeLocation > *)new std::vector< MAF::AlternativeLocation >((std::vector< MAF::AlternativeLocation > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_Clear(void * jarg1) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_Add(void * jarg1, void * jarg2) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  MAF::AlternativeLocation *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (MAF::AlternativeLocation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::AlternativeLocation const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MAF::AlternativeLocation const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_MediaLocationArray_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  std::vector< MAF::AlternativeLocation >::size_type result;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  result = ((std::vector< MAF::AlternativeLocation > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_MediaLocationArray_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  bool result;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  result = (bool)((std::vector< MAF::AlternativeLocation > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_MediaLocationArray_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  std::vector< MAF::AlternativeLocation >::size_type result;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  result = ((std::vector< MAF::AlternativeLocation > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  std::vector< MAF::AlternativeLocation >::size_type arg2 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (std::vector< MAF::AlternativeLocation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_MediaLocationArray__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MAF::AlternativeLocation > *)new_std_vector_Sl_MAF_AlternativeLocation_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaLocationArray_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  MAF::AlternativeLocation result;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MAF_AlternativeLocation_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MAF::AlternativeLocation(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaLocationArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  std::vector< MAF::AlternativeLocation >::value_type *result = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::AlternativeLocation >::value_type *) &std_vector_Sl_MAF_AlternativeLocation_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  MAF::AlternativeLocation *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::AlternativeLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::AlternativeLocation const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__setitem(arg1,arg2,(MAF::AlternativeLocation const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_AddRange(void * jarg1, void * jarg2) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  std::vector< MAF::AlternativeLocation > *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (std::vector< MAF::AlternativeLocation > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::AlternativeLocation > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MAF_AlternativeLocation_Sg__AddRange(arg1,(std::vector< MAF::AlternativeLocation > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaLocationArray_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MAF::AlternativeLocation > *)std_vector_Sl_MAF_AlternativeLocation_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  MAF::AlternativeLocation *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::AlternativeLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::AlternativeLocation const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__Insert(arg1,arg2,(MAF::AlternativeLocation const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  std::vector< MAF::AlternativeLocation > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::AlternativeLocation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::AlternativeLocation > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__InsertRange(arg1,arg2,(std::vector< MAF::AlternativeLocation > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaLocationArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::AlternativeLocation *arg1 = 0 ;
  int arg2 ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::AlternativeLocation const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::AlternativeLocation > *)std_vector_Sl_MAF_AlternativeLocation_Sg__Repeat((MAF::AlternativeLocation const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_Reverse__SWIG_0(void * jarg1) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  std_vector_Sl_MAF_AlternativeLocation_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaLocationArray_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  int arg2 ;
  std::vector< MAF::AlternativeLocation > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::AlternativeLocation > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::AlternativeLocation > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_AlternativeLocation_Sg__SetRange(arg1,arg2,(std::vector< MAF::AlternativeLocation > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_MediaLocationArray(void * jarg1) {
  std::vector< MAF::AlternativeLocation > *arg1 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  
  arg1 = (std::vector< MAF::AlternativeLocation > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_FrameArray__SWIG_0() {
  void * jresult ;
  std::vector< MAF::Frame > *result = 0 ;
  
  result = (std::vector< MAF::Frame > *)new std::vector< MAF::Frame >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_FrameArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MAF::Frame > *arg1 = 0 ;
  std::vector< MAF::Frame > *result = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Frame > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MAF::Frame > *)new std::vector< MAF::Frame >((std::vector< MAF::Frame > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_Clear(void * jarg1) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_Add(void * jarg1, void * jarg2) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  MAF::Frame *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (MAF::Frame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Frame const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MAF::Frame const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_FrameArray_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  std::vector< MAF::Frame >::size_type result;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  result = ((std::vector< MAF::Frame > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_FrameArray_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  bool result;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  result = (bool)((std::vector< MAF::Frame > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_FrameArray_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  std::vector< MAF::Frame >::size_type result;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  result = ((std::vector< MAF::Frame > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  std::vector< MAF::Frame >::size_type arg2 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (std::vector< MAF::Frame >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_FrameArray__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MAF::Frame > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MAF::Frame > *)new_std_vector_Sl_MAF_Frame_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_FrameArray_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  MAF::Frame result;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MAF_Frame_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MAF::Frame(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_FrameArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  std::vector< MAF::Frame >::value_type *result = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::Frame >::value_type *) &std_vector_Sl_MAF_Frame_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  MAF::Frame *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Frame_Sg__setitem(arg1,arg2,(MAF::Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_AddRange(void * jarg1, void * jarg2) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  std::vector< MAF::Frame > *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (std::vector< MAF::Frame > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Frame > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MAF_Frame_Sg__AddRange(arg1,(std::vector< MAF::Frame > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_FrameArray_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MAF::Frame > *result = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MAF::Frame > *)std_vector_Sl_MAF_Frame_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  MAF::Frame *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Frame_Sg__Insert(arg1,arg2,(MAF::Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  std::vector< MAF::Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Frame_Sg__InsertRange(arg1,arg2,(std::vector< MAF::Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MAF_Frame_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_Frame_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_FrameArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::Frame *arg1 = 0 ;
  int arg2 ;
  std::vector< MAF::Frame > *result = 0 ;
  
  arg1 = (MAF::Frame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Frame const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::Frame > *)std_vector_Sl_MAF_Frame_Sg__Repeat((MAF::Frame const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_Reverse__SWIG_0(void * jarg1) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  std_vector_Sl_MAF_Frame_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_Frame_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_FrameArray_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  int arg2 ;
  std::vector< MAF::Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Frame_Sg__SetRange(arg1,arg2,(std::vector< MAF::Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_FrameArray(void * jarg1) {
  std::vector< MAF::Frame > *arg1 = (std::vector< MAF::Frame > *) 0 ;
  
  arg1 = (std::vector< MAF::Frame > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_TrackArray__SWIG_0() {
  void * jresult ;
  std::vector< MAF::Track > *result = 0 ;
  
  result = (std::vector< MAF::Track > *)new std::vector< MAF::Track >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_TrackArray__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MAF::Track > *arg1 = 0 ;
  std::vector< MAF::Track > *result = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Track > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MAF::Track > *)new std::vector< MAF::Track >((std::vector< MAF::Track > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_Clear(void * jarg1) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_Add(void * jarg1, void * jarg2) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  MAF::Track *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (MAF::Track *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Track const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MAF::Track const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_TrackArray_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  std::vector< MAF::Track >::size_type result;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  result = ((std::vector< MAF::Track > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_TrackArray_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  bool result;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  result = (bool)((std::vector< MAF::Track > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_TrackArray_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  std::vector< MAF::Track >::size_type result;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  result = ((std::vector< MAF::Track > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  std::vector< MAF::Track >::size_type arg2 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (std::vector< MAF::Track >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_TrackArray__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MAF::Track > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MAF::Track > *)new_std_vector_Sl_MAF_Track_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_TrackArray_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  MAF::Track result;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MAF_Track_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MAF::Track(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_TrackArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  std::vector< MAF::Track >::value_type *result = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::Track >::value_type *) &std_vector_Sl_MAF_Track_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  MAF::Track *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::Track *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Track const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Track_Sg__setitem(arg1,arg2,(MAF::Track const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_AddRange(void * jarg1, void * jarg2) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  std::vector< MAF::Track > *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (std::vector< MAF::Track > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Track > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MAF_Track_Sg__AddRange(arg1,(std::vector< MAF::Track > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_TrackArray_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MAF::Track > *result = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MAF::Track > *)std_vector_Sl_MAF_Track_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  MAF::Track *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MAF::Track *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Track const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Track_Sg__Insert(arg1,arg2,(MAF::Track const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  std::vector< MAF::Track > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::Track > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Track > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Track_Sg__InsertRange(arg1,arg2,(std::vector< MAF::Track > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MAF_Track_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_Track_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_TrackArray_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::Track *arg1 = 0 ;
  int arg2 ;
  std::vector< MAF::Track > *result = 0 ;
  
  arg1 = (MAF::Track *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MAF::Track const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MAF::Track > *)std_vector_Sl_MAF_Track_Sg__Repeat((MAF::Track const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_Reverse__SWIG_0(void * jarg1) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  std_vector_Sl_MAF_Track_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MAF_Track_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TrackArray_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  int arg2 ;
  std::vector< MAF::Track > *arg3 = 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MAF::Track > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MAF::Track > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MAF_Track_Sg__SetRange(arg1,arg2,(std::vector< MAF::Track > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_TrackArray(void * jarg1) {
  std::vector< MAF::Track > *arg1 = (std::vector< MAF::Track > *) 0 ;
  
  arg1 = (std::vector< MAF::Track > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Pose_position_set(void * jarg1, void * jarg2) {
  MAF::Pose *arg1 = (MAF::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (MAF::Pose *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->position;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Pose_position_get(void * jarg1) {
  void * jresult ;
  MAF::Pose *arg1 = (MAF::Pose *) 0 ;
  float *result = 0 ;
  
  arg1 = (MAF::Pose *)jarg1; 
  result = (float *) ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Pose_orientation_set(void * jarg1, void * jarg2) {
  MAF::Pose *arg1 = (MAF::Pose *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (MAF::Pose *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->orientation;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Pose_orientation_get(void * jarg1) {
  void * jresult ;
  MAF::Pose *arg1 = (MAF::Pose *) 0 ;
  float *result = 0 ;
  
  arg1 = (MAF::Pose *)jarg1; 
  result = (float *) ((arg1)->orientation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Pose() {
  void * jresult ;
  MAF::Pose *result = 0 ;
  
  result = (MAF::Pose *)new MAF::Pose();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_Pose(void * jarg1) {
  MAF::Pose *arg1 = (MAF::Pose *) 0 ;
  
  arg1 = (MAF::Pose *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_PerspectiveCameraViewingVolume_aspectRatio_set(void * jarg1, double jarg2) {
  MAF::PerspectiveCameraViewingVolume *arg1 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::PerspectiveCameraViewingVolume *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_PerspectiveCameraViewingVolume_aspectRatio_get(void * jarg1) {
  double jresult ;
  MAF::PerspectiveCameraViewingVolume *arg1 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  double result;
  
  arg1 = (MAF::PerspectiveCameraViewingVolume *)jarg1; 
  result = (double) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_PerspectiveCameraViewingVolume_yFov_set(void * jarg1, double jarg2) {
  MAF::PerspectiveCameraViewingVolume *arg1 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::PerspectiveCameraViewingVolume *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yFov = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_PerspectiveCameraViewingVolume_yFov_get(void * jarg1) {
  double jresult ;
  MAF::PerspectiveCameraViewingVolume *arg1 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  double result;
  
  arg1 = (MAF::PerspectiveCameraViewingVolume *)jarg1; 
  result = (double) ((arg1)->yFov);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_PerspectiveCameraViewingVolume() {
  void * jresult ;
  MAF::PerspectiveCameraViewingVolume *result = 0 ;
  
  result = (MAF::PerspectiveCameraViewingVolume *)new MAF::PerspectiveCameraViewingVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_PerspectiveCameraViewingVolume(void * jarg1) {
  MAF::PerspectiveCameraViewingVolume *arg1 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  
  arg1 = (MAF::PerspectiveCameraViewingVolume *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_OrthographicCameraViewingVolume_xmag_set(void * jarg1, double jarg2) {
  MAF::OrthographicCameraViewingVolume *arg1 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::OrthographicCameraViewingVolume *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xmag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_OrthographicCameraViewingVolume_xmag_get(void * jarg1) {
  double jresult ;
  MAF::OrthographicCameraViewingVolume *arg1 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  double result;
  
  arg1 = (MAF::OrthographicCameraViewingVolume *)jarg1; 
  result = (double) ((arg1)->xmag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_OrthographicCameraViewingVolume_ymag_set(void * jarg1, double jarg2) {
  MAF::OrthographicCameraViewingVolume *arg1 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::OrthographicCameraViewingVolume *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ymag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_OrthographicCameraViewingVolume_ymag_get(void * jarg1) {
  double jresult ;
  MAF::OrthographicCameraViewingVolume *arg1 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  double result;
  
  arg1 = (MAF::OrthographicCameraViewingVolume *)jarg1; 
  result = (double) ((arg1)->ymag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_OrthographicCameraViewingVolume() {
  void * jresult ;
  MAF::OrthographicCameraViewingVolume *result = 0 ;
  
  result = (MAF::OrthographicCameraViewingVolume *)new MAF::OrthographicCameraViewingVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_OrthographicCameraViewingVolume(void * jarg1) {
  MAF::OrthographicCameraViewingVolume *arg1 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  
  arg1 = (MAF::OrthographicCameraViewingVolume *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Camera_type_set(void * jarg1, void * jarg2) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::CameraProjectionType *arg2 = (MAF::CameraProjectionType *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  arg2 = (MAF::CameraProjectionType *)jarg2; 
  if (arg1) (arg1)->type = (MAF::CameraProjectionType const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Camera_type_get(void * jarg1) {
  void * jresult ;
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::CameraProjectionType *result = 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  result = (MAF::CameraProjectionType *) ((arg1)->type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Camera_perspectiveCamViewVolume_set(void * jarg1, void * jarg2) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::PerspectiveCameraViewingVolume *arg2 = (MAF::PerspectiveCameraViewingVolume *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  arg2 = (MAF::PerspectiveCameraViewingVolume *)jarg2; 
  if (arg1) (arg1)->perspectiveCamViewVolume = (MAF::PerspectiveCameraViewingVolume const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Camera_perspectiveCamViewVolume_get(void * jarg1) {
  void * jresult ;
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::PerspectiveCameraViewingVolume *result = 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  result = (MAF::PerspectiveCameraViewingVolume *) ((arg1)->perspectiveCamViewVolume);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Camera_orthographicCamViewVolume_set(void * jarg1, void * jarg2) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::OrthographicCameraViewingVolume *arg2 = (MAF::OrthographicCameraViewingVolume *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  arg2 = (MAF::OrthographicCameraViewingVolume *)jarg2; 
  if (arg1) (arg1)->orthographicCamViewVolume = (MAF::OrthographicCameraViewingVolume const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Camera_orthographicCamViewVolume_get(void * jarg1) {
  void * jresult ;
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  MAF::OrthographicCameraViewingVolume *result = 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  result = (MAF::OrthographicCameraViewingVolume *) ((arg1)->orthographicCamViewVolume);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Camera_zNear_set(void * jarg1, void * jarg2) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->zNear = (double const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Camera_zNear_get(void * jarg1) {
  void * jresult ;
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  result = (double *) ((arg1)->zNear);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Camera_zFar_set(void * jarg1, void * jarg2) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->zFar = (double const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Camera_zFar_get(void * jarg1) {
  void * jresult ;
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  result = (double *) ((arg1)->zFar);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Camera() {
  void * jresult ;
  MAF::Camera *result = 0 ;
  
  result = (MAF::Camera *)new MAF::Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_Camera(void * jarg1) {
  MAF::Camera *arg1 = (MAF::Camera *) 0 ;
  
  arg1 = (MAF::Camera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_ViewInfo_pose_set(void * jarg1, void * jarg2) {
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  MAF::Pose *arg2 = (MAF::Pose *) 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  arg2 = (MAF::Pose *)jarg2; 
  if (arg1) (arg1)->pose = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_ViewInfo_pose_get(void * jarg1) {
  void * jresult ;
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  MAF::Pose *result = 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  result = (MAF::Pose *)& ((arg1)->pose);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_ViewInfo_camera_set(void * jarg1, void * jarg2) {
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  MAF::Camera *arg2 = (MAF::Camera *) 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  arg2 = (MAF::Camera *)jarg2; 
  if (arg1) (arg1)->camera = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_ViewInfo_camera_get(void * jarg1) {
  void * jresult ;
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  MAF::Camera *result = 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  result = (MAF::Camera *)& ((arg1)->camera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_ViewInfo_objectTransform_set(void * jarg1, void * jarg2) {
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  float (*arg2)[4] = (float (*)[4]) 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  arg2 = (float (*)[4])jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->objectTransform);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_ViewInfo_objectTransform_get(void * jarg1) {
  void * jresult ;
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  float (*result)[4] = 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  result = (float (*)[4]) ((arg1)->objectTransform);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_ViewInfo() {
  void * jresult ;
  MAF::ViewInfo *result = 0 ;
  
  result = (MAF::ViewInfo *)new MAF::ViewInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_ViewInfo(void * jarg1) {
  MAF::ViewInfo *arg1 = (MAF::ViewInfo *) 0 ;
  
  arg1 = (MAF::ViewInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Frame_index_set(void * jarg1, unsigned char jarg2) {
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_maf_Frame_index_get(void * jarg1) {
  unsigned char jresult ;
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint8_t result;
  
  arg1 = (MAF::Frame *)jarg1; 
  result = (uint8_t) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Frame_timestamp_set(void * jarg1, unsigned long long jarg2) {
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_maf_Frame_timestamp_get(void * jarg1) {
  unsigned long long jresult ;
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint64_t result;
  
  arg1 = (MAF::Frame *)jarg1; 
  result = (uint64_t) ((arg1)->timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Frame_length_set(void * jarg1, unsigned int jarg2) {
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_Frame_length_get(void * jarg1) {
  unsigned int jresult ;
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::Frame *)jarg1; 
  result = (uint32_t) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Frame_data_set(void * jarg1, void * jarg2) {
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_Frame_data_get(void * jarg1) {
  void * jresult ;
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  result = (uint8_t *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Frame__SWIG_0(unsigned char jarg1, unsigned long long jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  uint8_t arg1 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint8_t *)jarg4; 
  result = (MAF::Frame *)new MAF::Frame(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Frame__SWIG_1(unsigned char jarg1, unsigned long long jarg2, unsigned int jarg3) {
  void * jresult ;
  uint8_t arg1 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (MAF::Frame *)new MAF::Frame(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Frame__SWIG_2(unsigned char jarg1, unsigned long long jarg2) {
  void * jresult ;
  uint8_t arg1 ;
  uint64_t arg2 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (MAF::Frame *)new MAF::Frame(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Frame__SWIG_3(unsigned char jarg1) {
  void * jresult ;
  uint8_t arg1 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  result = (MAF::Frame *)new MAF::Frame(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Frame__SWIG_4() {
  void * jresult ;
  MAF::Frame *result = 0 ;
  
  result = (MAF::Frame *)new MAF::Frame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_Frame(void * jarg1) {
  MAF::Frame *arg1 = (MAF::Frame *) 0 ;
  
  arg1 = (MAF::Frame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferHandler() {
  void * jresult ;
  MAF::BufferHandler *result = 0 ;
  
  result = (MAF::BufferHandler *)new MAF::BufferHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_BufferHandler(void * jarg1) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferHandler_getFrames(void * jarg1) {
  void * jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  std::vector< MAF::Frame > *result = 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (std::vector< MAF::Frame > *)(arg1)->getFrames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_allocate__SWIG_0(void * jarg1, unsigned char jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->allocate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_allocate__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  (arg1)->allocate(arg2,arg3);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_maf_BufferHandler_capacity(void * jarg1) {
  unsigned char jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  uint8_t result;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (uint8_t)(arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_maf_BufferHandler_count(void * jarg1) {
  unsigned char jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  uint8_t result;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (uint8_t)(arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_free(void * jarg1) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  (arg1)->free();
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferHandler_getReadIdx(void * jarg1) {
  int jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  int result;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (int)(arg1)->getReadIdx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferHandler_getWriteIdx(void * jarg1) {
  int jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  int result;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (int)(arg1)->getWriteIdx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_headerLength_set(void * jarg1, int jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->headerLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferHandler_headerLength_get(void * jarg1) {
  int jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  int result;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (int) ((arg1)->headerLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_writeFrame(void * jarg1, void * jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Frame *arg2 = (MAF::Frame *) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (MAF::Frame *)jarg2; 
  (arg1)->writeFrame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_writeFrame2(void * jarg1, void * jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Frame *arg2 = (MAF::Frame *) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (MAF::Frame *)jarg2; 
  (arg1)->writeFrame2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_writeFrame3(void * jarg1, void * jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Frame *arg2 = (MAF::Frame *) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (MAF::Frame *)jarg2; 
  (arg1)->writeFrame3(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferHandler_readFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  result = (MAF::Frame *)(arg1)->readFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferHandler_readFrame__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  result = (MAF::Frame *)(arg1)->readFrame(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferHandler_readFrame__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  double arg2 ;
  MAF::Frame *result = 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (double)jarg2; 
  result = (MAF::Frame *)(arg1)->readFrame(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_setOnFrameWriteCallback(void * jarg1, void * jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Callback arg2 = (MAF::Callback) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (MAF::Callback)jarg2; 
  (arg1)->setOnFrameWriteCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferHandler_setOnFrameReadCallback(void * jarg1, void * jarg2) {
  MAF::BufferHandler *arg1 = (MAF::BufferHandler *) 0 ;
  MAF::Callback arg2 = (MAF::Callback) 0 ;
  
  arg1 = (MAF::BufferHandler *)jarg1; 
  arg2 = (MAF::Callback)jarg2; 
  (arg1)->setOnFrameReadCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_bufferId_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bufferId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_bufferId_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (int) ((arg1)->bufferId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_handler_set(void * jarg1, void * jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::BufferHandler *arg2 = (MAF::BufferHandler *) 0 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (MAF::BufferHandler *)jarg2; 
  if (arg1) (arg1)->handler = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfo_handler_get(void * jarg1) {
  void * jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::BufferHandler *result = 0 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (MAF::BufferHandler *) ((arg1)->handler);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_componentType_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::ComponentType arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (MAF::ComponentType)jarg2; 
  if (arg1) (arg1)->componentType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_componentType_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::ComponentType result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (MAF::ComponentType) ((arg1)->componentType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_type_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::SampleType arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (MAF::SampleType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_type_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::SampleType result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (MAF::SampleType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_offset_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_offset_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (int) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_stride_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_stride_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  int result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (int) ((arg1)->stride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfo_attributeType_set(void * jarg1, int jarg2) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::AttributeType arg2 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  arg2 = (MAF::AttributeType)jarg2; 
  if (arg1) (arg1)->attributeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfo_attributeType_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  MAF::AttributeType result;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  result = (MAF::AttributeType) ((arg1)->attributeType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfo() {
  void * jresult ;
  MAF::BufferInfo *result = 0 ;
  
  result = (MAF::BufferInfo *)new MAF::BufferInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_BufferInfo(void * jarg1) {
  MAF::BufferInfo *arg1 = (MAF::BufferInfo *) 0 ;
  
  arg1 = (MAF::BufferInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Track_track_set(void * jarg1, const char * jarg2) {
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MAF::Track *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->track = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_maf_Track_track_get(void * jarg1) {
  const char * jresult ;
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MAF::Track *)jarg1; 
  result = (std::string *) & ((arg1)->track);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Track_id_set(void * jarg1, int jarg2) {
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::Track *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_Track_id_get(void * jarg1) {
  int jresult ;
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  int result;
  
  arg1 = (MAF::Track *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_Track_bufferId_set(void * jarg1, int jarg2) {
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  int arg2 ;
  
  arg1 = (MAF::Track *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bufferId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_Track_bufferId_get(void * jarg1) {
  int jresult ;
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  int result;
  
  arg1 = (MAF::Track *)jarg1; 
  result = (int) ((arg1)->bufferId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_Track() {
  void * jresult ;
  MAF::Track *result = 0 ;
  
  result = (MAF::Track *)new MAF::Track();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_Track(void * jarg1) {
  MAF::Track *arg1 = (MAF::Track *) 0 ;
  
  arg1 = (MAF::Track *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_AlternativeLocation_mimeType_set(void * jarg1, const char * jarg2) {
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->mimeType = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_maf_AlternativeLocation_mimeType_get(void * jarg1) {
  const char * jresult ;
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  result = (std::string *) & ((arg1)->mimeType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_AlternativeLocation_tracks_set(void * jarg1, void * jarg2) {
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::vector< MAF::Track > *arg2 = (std::vector< MAF::Track > *) 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  arg2 = (std::vector< MAF::Track > *)jarg2; 
  if (arg1) (arg1)->tracks = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_AlternativeLocation_tracks_get(void * jarg1) {
  void * jresult ;
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::vector< MAF::Track > *result = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  result = (std::vector< MAF::Track > *)& ((arg1)->tracks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_AlternativeLocation_uri_set(void * jarg1, const char * jarg2) {
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_maf_AlternativeLocation_uri_get(void * jarg1) {
  const char * jresult ;
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  result = (std::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_AlternativeLocation() {
  void * jresult ;
  MAF::AlternativeLocation *result = 0 ;
  
  result = (MAF::AlternativeLocation *)new MAF::AlternativeLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_AlternativeLocation(void * jarg1) {
  MAF::AlternativeLocation *arg1 = (MAF::AlternativeLocation *) 0 ;
  
  arg1 = (MAF::AlternativeLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaInfo_name_set(void * jarg1, const char * jarg2) {
  MAF::MediaInfo *arg1 = (MAF::MediaInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MAF::MediaInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_maf_MediaInfo_name_get(void * jarg1) {
  const char * jresult ;
  MAF::MediaInfo *arg1 = (MAF::MediaInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MAF::MediaInfo *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaInfo_alternatives_set(void * jarg1, void * jarg2) {
  MAF::MediaInfo *arg1 = (MAF::MediaInfo *) 0 ;
  std::vector< MAF::AlternativeLocation > *arg2 = (std::vector< MAF::AlternativeLocation > *) 0 ;
  
  arg1 = (MAF::MediaInfo *)jarg1; 
  arg2 = (std::vector< MAF::AlternativeLocation > *)jarg2; 
  if (arg1) (arg1)->alternatives = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaInfo_alternatives_get(void * jarg1) {
  void * jresult ;
  MAF::MediaInfo *arg1 = (MAF::MediaInfo *) 0 ;
  std::vector< MAF::AlternativeLocation > *result = 0 ;
  
  arg1 = (MAF::MediaInfo *)jarg1; 
  result = (std::vector< MAF::AlternativeLocation > *)& ((arg1)->alternatives);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_MediaInfo() {
  void * jresult ;
  MAF::MediaInfo *result = 0 ;
  
  result = (MAF::MediaInfo *)new MAF::MediaInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_MediaInfo(void * jarg1) {
  MAF::MediaInfo *arg1 = (MAF::MediaInfo *) 0 ;
  
  arg1 = (MAF::MediaInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TimeInfo_startTime_set(void * jarg1, double jarg2) {
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_TimeInfo_startTime_get(void * jarg1) {
  double jresult ;
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  double result;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  result = (double) ((arg1)->startTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TimeInfo_timeOffset_set(void * jarg1, double jarg2) {
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  double arg2 ;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeOffset = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_TimeInfo_timeOffset_get(void * jarg1) {
  double jresult ;
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  double result;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  result = (double) ((arg1)->timeOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TimeInfo_autoplay_set(void * jarg1, unsigned int jarg2) {
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoplay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_TimeInfo_autoplay_get(void * jarg1) {
  unsigned int jresult ;
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  bool result;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  result = (bool) ((arg1)->autoplay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_TimeInfo_loop_set(void * jarg1, unsigned int jarg2) {
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->loop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_TimeInfo_loop_get(void * jarg1) {
  unsigned int jresult ;
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  bool result;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  result = (bool) ((arg1)->loop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_TimeInfo() {
  void * jresult ;
  MAF::TimeInfo *result = 0 ;
  
  result = (MAF::TimeInfo *)new MAF::TimeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_TimeInfo(void * jarg1) {
  MAF::TimeInfo *arg1 = (MAF::TimeInfo *) 0 ;
  
  arg1 = (MAF::TimeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_IMediaPipeline(void * jarg1) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_IMediaPipeline_bufferInfo(void * jarg1, int jarg2) {
  void * jresult ;
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  int arg2 ;
  MAF::BufferInfo *result = 0 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MAF::BufferInfo *)(arg1)->bufferInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_IMediaPipeline_state(void * jarg1) {
  int jresult ;
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  MAF::PipelineState result;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  result = (MAF::PipelineState)(arg1)->state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_IMediaPipeline_initialize(void * jarg1, void * jarg2, void * jarg3) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  MAF::MediaInfo arg2 ;
  std::vector< MAF::BufferInfo > arg3 ;
  MAF::MediaInfo *argp2 ;
  std::vector< MAF::BufferInfo > *argp3 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  argp2 = (MAF::MediaInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MAF::MediaInfo", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (std::vector< MAF::BufferInfo > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< MAF::BufferInfo >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->initialize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_IMediaPipeline_setStateChangeCallback(void * jarg1, void * jarg2) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  arg2 = (void (*)())jarg2; 
  (arg1)->setStateChangeCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_IMediaPipeline_startFetching(void * jarg1, void * jarg2, void * jarg3) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  MAF::TimeInfo arg2 ;
  MAF::ViewInfo arg3 ;
  MAF::TimeInfo *argp2 ;
  MAF::ViewInfo *argp3 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  argp2 = (MAF::TimeInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MAF::TimeInfo", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (MAF::ViewInfo *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MAF::ViewInfo", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->startFetching(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_IMediaPipeline_updateView(void * jarg1, void * jarg2) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  MAF::ViewInfo arg2 ;
  MAF::ViewInfo *argp2 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  argp2 = (MAF::ViewInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MAF::ViewInfo", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->updateView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_IMediaPipeline_stopFetching(void * jarg1) {
  MAF::IMediaPipeline *arg1 = (MAF::IMediaPipeline *) 0 ;
  
  arg1 = (MAF::IMediaPipeline *)jarg1; 
  (arg1)->stopFetching();
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_componentSize(int jarg1) {
  int jresult ;
  MAF::ComponentType arg1 ;
  int result;
  
  arg1 = (MAF::ComponentType)jarg1; 
  result = (int)MAF::componentSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_sampleSize(int jarg1) {
  int jresult ;
  MAF::SampleType arg1 ;
  int result;
  
  arg1 = (MAF::SampleType)jarg1; 
  result = (int)MAF::sampleSize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_timestampDelta_set(void * jarg1, float jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  float arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->timestampDelta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_maf_BufferInfoHeader_timestampDelta_get(void * jarg1) {
  float jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  float result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (float) ((arg1)->timestampDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_immutable_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->immutable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_immutable_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  bool result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (bool) ((arg1)->immutable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_componentType_set(void * jarg1, int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  MAF::ComponentType arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (MAF::ComponentType)jarg2; 
  if (arg1) (arg1)->componentType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfoHeader_componentType_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  MAF::ComponentType result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (MAF::ComponentType) ((arg1)->componentType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_type_set(void * jarg1, int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  MAF::SampleType arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (MAF::SampleType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfoHeader_type_get(void * jarg1) {
  int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  MAF::SampleType result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (MAF::SampleType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_normalized_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->normalized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_normalized_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  bool result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (bool) ((arg1)->normalized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_byteOffset_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->byteOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_byteOffset_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (uint32_t) ((arg1)->byteOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_count_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_count_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (uint32_t) ((arg1)->count);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_max_set(void * jarg1, void * jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeader_max_get(void * jarg1) {
  void * jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  void *result = 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (void *) ((arg1)->max);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_min_set(void * jarg1, void * jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeader_min_get(void * jarg1) {
  void * jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  void *result = 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (void *) ((arg1)->min);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteOffset_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bufferViewByteOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteOffset_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (uint32_t) ((arg1)->bufferViewByteOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteLength_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bufferViewByteLength = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteLength_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (uint32_t) ((arg1)->bufferViewByteLength);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteStride_set(void * jarg1, unsigned int jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bufferViewByteStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_maf_BufferInfoHeader_bufferViewByteStride_get(void * jarg1) {
  unsigned int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint32_t result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (uint32_t) ((arg1)->bufferViewByteStride);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maf_BufferInfoHeader_GetHeaderSize(void * jarg1) {
  int jresult ;
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  int result;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  result = (int)(arg1)->GetHeaderSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_WriteAccessorHeader(void * jarg1, void * jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  (arg1)->WriteAccessorHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_ReadAccessorHeader(void * jarg1, void * jarg2) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  (arg1)->ReadAccessorHeader(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_BufferInfoHeader_CreateAccessorsHeaders(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::vector< MAF::BufferInfo > *arg1 = (std::vector< MAF::BufferInfo > *) 0 ;
  bool arg2 ;
  std::vector< MAF::BufferInfoHeader > *result = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfo > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (std::vector< MAF::BufferInfoHeader > *)MAF::BufferInfoHeader::CreateAccessorsHeaders(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_ComputeAccessorsHeadersInterleaved(void * jarg1) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  MAF::BufferInfoHeader::ComputeAccessorsHeadersInterleaved(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_ComputeAccessorsHeadersPlanar(void * jarg1) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  MAF::BufferInfoHeader::ComputeAccessorsHeadersPlanar(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_ComputeTotalHeadersLength(void * jarg1, int * jarg2) {
  std::vector< MAF::BufferInfoHeader > *arg1 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  int *arg2 = 0 ;
  
  arg1 = (std::vector< MAF::BufferInfoHeader > *)jarg1; 
  arg2 = (int *)jarg2; 
  MAF::BufferInfoHeader::ComputeTotalHeadersLength(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_WriteAccessorsHeaders(void * jarg1, void * jarg2) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  std::vector< MAF::BufferInfoHeader > *arg2 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (uint8_t *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfoHeader > *)jarg2; 
  MAF::BufferInfoHeader::WriteAccessorsHeaders(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_BufferInfoHeader_ReadAccessorsHeaders(void * jarg1, void * jarg2) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  std::vector< MAF::BufferInfoHeader > *arg2 = (std::vector< MAF::BufferInfoHeader > *) 0 ;
  
  arg1 = (uint8_t *)jarg1; 
  arg2 = (std::vector< MAF::BufferInfoHeader > *)jarg2; 
  MAF::BufferInfoHeader::ReadAccessorsHeaders(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_BufferInfoHeader() {
  void * jresult ;
  MAF::BufferInfoHeader *result = 0 ;
  
  result = (MAF::BufferInfoHeader *)new MAF::BufferInfoHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_BufferInfoHeader(void * jarg1) {
  MAF::BufferInfoHeader *arg1 = (MAF::BufferInfoHeader *) 0 ;
  
  arg1 = (MAF::BufferInfoHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_maf_getTimestamp__SWIG_0(double jarg1) {
  unsigned long long jresult ;
  double arg1 ;
  uint64_t result;
  
  arg1 = (double)jarg1; 
  result = (uint64_t)MAF::getTimestamp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_maf_getTimestamp__SWIG_1(long long jarg1) {
  unsigned long long jresult ;
  int64_t arg1 ;
  uint64_t result;
  
  arg1 = (int64_t)jarg1; 
  result = (uint64_t)MAF::getTimestamp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_maf_getTime_s(unsigned long long jarg1) {
  double jresult ;
  uint64_t arg1 ;
  double result;
  
  arg1 = (uint64_t)jarg1; 
  result = (double)MAF::getTime_s(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_new_MediaPipelineFactory() {
  void * jresult ;
  MAF::MediaPipelineFactory *result = 0 ;
  
  result = (MAF::MediaPipelineFactory *)new MAF::MediaPipelineFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_delete_MediaPipelineFactory(void * jarg1) {
  MAF::MediaPipelineFactory *arg1 = (MAF::MediaPipelineFactory *) 0 ;
  
  arg1 = (MAF::MediaPipelineFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaPipelineFactory_getInstance() {
  void * jresult ;
  MAF::MediaPipelineFactory *result = 0 ;
  
  result = (MAF::MediaPipelineFactory *)MAF::MediaPipelineFactory::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaPipelineFactory_registry_set(void * jarg1, void * jarg2) {
  MAF::MediaPipelineFactory *arg1 = (MAF::MediaPipelineFactory *) 0 ;
  std::map< std::string,std::function< MAF::IMediaPipeline *(void) > > *arg2 = (std::map< std::string,std::function< MAF::IMediaPipeline *(void) > > *) 0 ;
  
  arg1 = (MAF::MediaPipelineFactory *)jarg1; 
  arg2 = (std::map< std::string,std::function< MAF::IMediaPipeline *(void) > > *)jarg2; 
  if (arg1) (arg1)->registry = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaPipelineFactory_registry_get(void * jarg1) {
  void * jresult ;
  MAF::MediaPipelineFactory *arg1 = (MAF::MediaPipelineFactory *) 0 ;
  std::map< std::string,std::function< MAF::IMediaPipeline *(void) > > *result = 0 ;
  
  arg1 = (MAF::MediaPipelineFactory *)jarg1; 
  result = (std::map< std::string,std::function< MAF::IMediaPipeline *(void) > > *)& ((arg1)->registry);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_maf_MediaPipelineFactory_registerPlugin(void * jarg1, const char * jarg2, void * jarg3) {
  MAF::MediaPipelineFactory *arg1 = (MAF::MediaPipelineFactory *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::function< MAF::IMediaPipeline *(void) > > arg3 ;
  std::function< MAF::IMediaPipeline *(void) > *argp3 ;
  
  arg1 = (MAF::MediaPipelineFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (std::function< MAF::IMediaPipeline *(void) > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< MAF::IMediaPipeline *(void) >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->registerPlugin(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_maf_MediaPipelineFactory_createMediaPipeline(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MAF::MediaPipelineFactory *arg1 = (MAF::MediaPipelineFactory *) 0 ;
  MAF::MediaInfo arg2 ;
  std::vector< MAF::BufferInfo > arg3 ;
  MAF::MediaInfo *argp2 ;
  std::vector< MAF::BufferInfo > *argp3 ;
  MAF::IMediaPipeline *result = 0 ;
  
  arg1 = (MAF::MediaPipelineFactory *)jarg1; 
  argp2 = (MAF::MediaInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MAF::MediaInfo", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (std::vector< MAF::BufferInfo > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< MAF::BufferInfo >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (MAF::IMediaPipeline *)(arg1)->createMediaPipeline(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

